root_path <- 'C:/Users/MC/Dropbox (Partners HealthCare)'
root_dir <- file.path(root_path, 'PIPA')
clinico_dir <- file.path(root_dir,'data/patient')
area_dir <-  file.path(root_dir,'data/tissue_area')
cell_dir <-  file.path(root_dir,'data/cell_feature')
raw_density_dir <-  file.path(root_dir,'data/density')
marker_map_dir <-  file.path(root_dir,'data/marker2OPAL_map')
output_dir <- file.path(root_dir,'program_review', run_basename)
dir.create(output_dir)
output_dir <- file.path(output_dir, paste0('run', run_id))
dir.create(output_dir)
package_dir <- file.path(root_dir,'program_review/all_ver_package/')
setwd(package_dir)
setwd(package_ver)
devtools::load_all()
#######################################
#### STEP 1
#######################################
step1_dir <- file.path(output_dir, 'step1')
dir.create(step1_dir)
## ==================
## STEP 1:: loading surv data
## ==================
setwd(clinico_dir)
load(file=key_nm)
surv_data <- clinico[, c("cens","time")]
#######################################
#### STEP 2: construct cell phenotyping model
#######################################
step2_dir <- file.path(output_dir, 'step2')
dir.create(step2_dir)
########################################
#### STEP 3: cell phenotype assignment
########################################
step3_dir <- file.path(output_dir, 'step3')
dir.create(step3_dir)
########################################
#### Post-PIPA:: calculate density
########################################
## ==================
## load tissue area data (mm2)
## ==================
area_data <- get(load(file = file.path(area_dir, key_nm)))
########################################
#### Post-PIPA:: cell density-based survival analysis
########################################
postAnalysis_dir <- file.path(output_dir, 'postPIPA')
dir.create(postAnalysis_dir)
########################################
#### Post-PIPA:: re-assigning cells to merged phenotypes
########################################
setwd(step3_dir)
phenotype_data <- get(load(file='cell_phenotype_clean.RData'))
merged_pheno <- phenotype_data$phenotype
selected_phenotypes <- get(load(file = file.path(merged_pheno_dir, 'selected_phenotypes.RData')))
merged_pheno_dir
########################################
########################################
#### Post-PIPA:: phenotypes merging based on prognosis
########################################
########################################
Pval <- 0.005
merged_pheno_dir <- file.path(postAnalysis_dir, paste0('merged_pheno_P',Pval))
dir.create(merged_pheno_dir)
selected_phenotypes <- get(load(file = file.path(merged_pheno_dir, 'selected_phenotypes.RData')))
selected_phenotypes <- sapply(strsplit(x=selected_phenotypes, split = '_'), "[[", 1)
#### ***********************************
#### MANUAL INPUT: check output files in the 'merged_pheno' sub-folder
#### ***********************************
## BAD cells
bad_phenotypes <- grep(x=selected_phenotypes, pattern = 'bad', value = TRUE)
merged_pheno[merged_pheno %in% bad_phenotypes] <- 'BAD'
table(merged_pheno)
## GOOD cells
good_phenotypes <- grep(x=selected_phenotypes, pattern = 'good', value = TRUE)
merged_pheno[merged_pheno %in% good_phenotypes] <- 'GOOD'
table(merged_pheno)
#### ***********************************
#### ***********************************
## other cells
merged_pheno[!merged_pheno %in% c('BAD','GOOD')] <- 'intermediate'
phenotype_data$phenotype <- merged_pheno
table(phenotype_data$phenotype)
## saving
setwd(merged_pheno_dir)
save(phenotype_data, file='cell_phenotype_clean.RData')
########################################
#### Post-PIPA(merged phenotypes):: calculate density
########################################
## ==================
## load tissue area data (mm2)
## ==================
area_data <- get(load(file = file.path(area_dir, key_nm)))
merged_pheno_dir
## ==================
## compute cell density
## ==================
calculate_density(area_data=area_data,
input_dir=merged_pheno_dir, output_dir=merged_pheno_dir)
########################################
#### Post-PIPA(merged phenotypes):: cell density-based survival analysis
########################################
colnames(clinico)
density_surv_analysis(surv_data= clinico,
input_dir=merged_pheno_dir, output_dir=merged_pheno_dir,
density_fnm= 'cell_phenotype_clean_density.RData',
KM_xlab= surv_bnm)
########################################
## prepare raw macrophage density data
raw_dens <- get(load(file = file.path(raw_density_dir, key_nm)))
celltype
raw_dens_S <- raw_dens[,c("tumor_ids", paste0(celltype, '_S'))]
colnames(raw_dens_S) <- plyr::mapvalues(x=colnames(raw_dens_S), from = paste0(celltype, '_S'),
to='density')
raw_dens_S$area <- 'S'
raw_dens_S$phenotype <- celltype
## T
raw_dens_T <- raw_dens[,c("tumor_ids", paste0(celltype, '_T'))]
colnames(raw_dens_T) <- plyr::mapvalues(x=colnames(raw_dens_T), from = paste0(celltype, '_T'),
to='density')
raw_dens_T$area <- 'T'
raw_dens_T$phenotype <- celltype
## combine T & S
raw_dens <- rbind(raw_dens_S, raw_dens_T)
Rphenograph
########################################
#### PhenoGraph Cluster Analysis
########################################
setwd(package_dir)
setwd('PIPA_v3')
devtools::load_all()
composition_surv_analysis(surv_data= clinico, prognosis_delineation=TRUE,
input_dir=merged_pheno_dir, output_dir=merged_pheno_dir,
#range_max_k_lvl2=c(4),range_neighborsize = c(0.05,0.1),
#range_subspl_size = c(0.6, 0.95),
KM_xlab=surv_bnm,area_split=TRUE)
########################################
#### PhenoGraph Cluster Analysis
########################################
setwd(package_dir)
setwd('PIPA_v3')
devtools::load_all()
composition_surv_analysis(surv_data= clinico, prognosis_delineation=TRUE,
input_dir=merged_pheno_dir, output_dir=merged_pheno_dir,
#range_max_k_lvl2=c(4),range_neighborsize = c(0.05,0.1),
#range_subspl_size = c(0.6, 0.95),
KM_xlab=surv_bnm,area_split=TRUE)
seq(0.05,0.25,by=0.05)
composition_surv_analysis(surv_data= clinico, prognosis_delineation=TRUE,
input_dir=merged_pheno_dir, output_dir=merged_pheno_dir,
neighbor_size_byFrac= seq(0.15,0.25,by=0.05),
KM_xlab=surv_bnm,area_split=TRUE)
########################################
#### PhenoGraph Cluster Analysis
########################################
setwd(package_dir)
setwd('PIPA_v3')
devtools::load_all()
composition_surv_analysis(surv_data= clinico, prognosis_delineation=TRUE,
input_dir=merged_pheno_dir, output_dir=merged_pheno_dir,
neighbor_size_byFrac= seq(0.05,0.25,by=0.05),
KM_xlab=surv_bnm,area_split=TRUE)
########################################
#### PhenoGraph Cluster Analysis
########################################
setwd(package_dir)
setwd('PIPA_v3')
devtools::load_all()
composition_surv_analysis(surv_data= clinico, prognosis_delineation=TRUE,
input_dir=merged_pheno_dir, output_dir=merged_pheno_dir,
neighbor_size_byFrac= seq(0.05,0.25,by=0.05),
KM_xlab=surv_bnm,area_split=TRUE)
########################################
#### Post-PIPA(merged phenotypes):: feature heat-map for markers
########################################
setwd(marker_map_dir)
marker_map <- get(load(file=key_nm))
## load cell feature data
cell_data <- get(load(file = file.path(cell_dir, key_nm)))
cell_data2 <- cell_data[,c("cell_ids","tumor_ids",marker_map$features)]
colnames(cell_data2) <- plyr::mapvalues(x=colnames(cell_data2), from = marker_map$features, to=marker_map$new_feature_names)
colnames(cell_data2)
Viz_feature_heatmap_byPhenotype(cell_data= cell_data2,
pheno_dir=merged_pheno_dir, output_dir=merged_pheno_dir,
plot_bnm='markers')
########################################
#### Post-PIPA(merged phenotypes):: feature heat-map for markers + M1:M2 index
########################################
## compuate M1:M2 index
cell_data2 <-cell_data2 %>% mutate(M1toM2= (CD86 *IRF5)/(MAF * MRC1))
cell_data2 <- cell_data2[,c("cell_ids", "tumor_ids","M1toM2")]
summary(cell_data2)
Viz_feature_heatmap_byPhenotype(cell_data= cell_data2,
column_scale=FALSE,
pheno_dir=merged_pheno_dir, output_dir=merged_pheno_dir,
plot_bnm='M1toM2_index')
head(cell_data2)
M1toM2_index_dir <- file.path(root_path,'mIF/mac/manuscripts/CIR_revision20200922/m1tom2_index')
#### prepare M1:M2 index
setwd(M1toM2_index_dir)
M1toM2_index <- read.csv('M1toM2index_cellLevel.csv', as.is = TRUE)
head(M1toM2_index)
########################################
#### Post-PIPA(merged phenotypes):: feature heat-map for markers + M1:M2 index
########################################
## ==============================
#### prepare M1:M2 index
## ==============================
setwd(marker_map_dir)
marker_map <- get(load(file=marker_key_nm))
marker_map
########################################
#### Post-PIPA(merged phenotypes):: feature heat-map for markers + M1:M2 index
########################################
## ==============================
#### prepare M1:M2 index
## ==============================
cell_data2 <- cell_data[,c("cell_ids","tumor_ids",marker_map$features)]
colnames(cell_data2) <- plyr::mapvalues(x=colnames(cell_data2), from = marker_map$features, to=marker_map$new_feature_names)
colnames(cell_data2)
#### get PIPA phenotype assignment
setwd(pheno_dir)
#### get PIPA phenotype assignment
setwd(merged_pheno_dir)
head(phenotype_data)
#### get PIPA phenotype assignment
pheno_data <- phenotype_data
pheno_data$core_ids <- NULL
pheno_data$area <- sapply(strsplit(x=pheno_data$cell_ids, '_'),'[[',5)
table(pheno_data$area)
head(pheno_data)
cell_data3 <- merge(cell_data2, pheno_data, by=c('cell_ids','tumor_ids'))
#### on individual markers: expression data scaling to [0 1] range
range01 <- function(x){(x-min(x))/(max(x)-min(x))}
cell_data_onlyExprs <- cell_data3[,grep(x=colnames(cell_data3) ,
pattern = paste0(c(marker_map$new_feature_names), collapse = '|'))]
scaled_intensity <- apply(cell_data_onlyExprs, MARGIN = 2, range01)
#colnames(scaled_intensity) <- paste0('scaled_', colnames(scaled_intensity))
cell_data3 <- cbind(cell_data3[,c("tumor_ids","phenotype","area")],scaled_intensity)
summary(cell_data3)
#### compute m1:m2 index = (CD86*IRF5)/(MAF*MRC1)
## compute numerator (CD86*IRF5)
cell_data3$m1_index <- cell_data3$CD86 * cell_data3$IRF5
## compuate denominator (MAF*MRC1)
cell_data3$m2_index <- cell_data3$MAF* cell_data3$MRC1
## compuate index
cell_data3$m1_to_m2 <- cell_data3$m1_index/cell_data3$m2_index
## checking for NAs and infinite values
summary(cell_data3$m1_to_m2)
sum(is.infinite(cell_data3$m1_to_m2 ))
## removing cells with NA or infinite values
cell_data3 <- cell_data3[!is.na(cell_data3$m1_to_m2),]
cell_data3 <- cell_data3[!is.infinite(cell_data3$m1_to_m2),]
summary(cell_data3$m1_to_m2)
cell_data3 <- cbind(cell_data3[,c("tumor_ids","phenotype","area")],scaled_intensity)
summary(cell_data3)
#### compute m1:m2 index = (CD86*IRF5)/(MAF*MRC1)
## compute numerator (CD86*IRF5)
cell_data3$m1_index <- cell_data3$CD86 * cell_data3$IRF5
## compuate denominator (MAF*MRC1)
cell_data3$m2_index <- cell_data3$MAF* cell_data3$MRC1
## compuate index
cell_data3$m1_to_m2 <- cell_data3$m1_index/cell_data3$m2_index
## checking for NAs and infinite values
summary(cell_data3$m1_to_m2)
sum(is.infinite(cell_data3$m1_to_m2 ))
## ==============================
## compute M1:M2 index
## ==============================
cell_data2 <-cell_data2 %>% mutate(M1toM2= (CD86 *IRF5)/(MAF * MRC1))
cell_data2 <- cell_data2[,c("cell_ids", "tumor_ids","M1toM2")]
summary(cell_data2)
Viz_feature_heatmap_byPhenotype(cell_data= cell_data2,
column_scale=FALSE,
pheno_dir=merged_pheno_dir, output_dir=merged_pheno_dir,
plot_bnm='M1toM2_index')
Viz_feature_boxplot_byPhenotype(cell_data= cell_data2,plot_bnm='M1toM2_index',outlier_removal=TRUE,
pheno_dir=merged_pheno_dir, output_dir=merged_pheno_dir,
ncol = 1, plot_width = 5, plot_height = 6)
########################################
#### Post-PIPA(merged phenotypes):: feature heat-map for selected features
########################################
## load features
setwd(step1_dir)
selected_features <- read.csv('selectedFeatures_clean.csv', as.is = TRUE)
selected_features <- read.csv('selectedFeatures_clean.csv', as.is = TRUE)
cell_data3 <- cell_data[,c("cell_ids","tumor_ids",selected_features$features)]
## cleanup features names
colnames(cell_data3) <- gsub(x=colnames(cell_data3), pattern = 'Nucleus', replacement = 'Nuc')
colnames(cell_data3) <- gsub(x=colnames(cell_data3), pattern = 'Cytoplasm', replacement = 'Cyto')
colnames(cell_data3) <- gsub(x=colnames(cell_data3), pattern = 'Membrane', replacement = 'Memb')
colnames(cell_data3) <- gsub(x=colnames(cell_data3), pattern = 'Entire.Cell', replacement = 'cell')
colnames(cell_data3) <- gsub(x=colnames(cell_data3), pattern = 'pixels', replacement = 'pix')
colnames(cell_data3) <- gsub(x=colnames(cell_data3), pattern = 'Std.Dev', replacement = 'SD')
key_nm
if(grepl(x=key_nm, pattern = 'mac')){
colnames(cell_data3) <- gsub(x=colnames(cell_data3), pattern = 'Opal.520', replacement = 'CD68')
colnames(cell_data3) <- gsub(x=colnames(cell_data3), pattern = 'Opal.540', replacement = 'CD86')
colnames(cell_data3) <- gsub(x=colnames(cell_data3), pattern = 'Opal.570', replacement = 'MAF')
colnames(cell_data3) <- gsub(x=colnames(cell_data3), pattern = 'Opal.650', replacement = 'IRF5')
colnames(cell_data3) <- gsub(x=colnames(cell_data3), pattern = 'Opal.690', replacement = 'CD206')
}else colnames(cell_data3) <- gsub(x=colnames(cell_data3), pattern = 'Opal.', replacement = '')
grepl(x=key_nm, pattern = 'NHS.HPFS_mac')
colnames(cell_data3) <- gsub(x=colnames(cell_data3), pattern = '\\.', replacement = ' ')
colnames(cell_data3)
Viz_feature_heatmap_byPhenotype(cell_data= cell_data3,
pheno_dir=merged_pheno_dir, output_dir=merged_pheno_dir,
plot_bnm='PIPAfeatures')
Viz_feature_boxplot_byPhenotype(cell_data= cell_data3,plot_bnm='PIPAfeatures',outlier_removal=TRUE,
pheno_dir=merged_pheno_dir, output_dir=merged_pheno_dir,
ncol = 2, plot_height = 10, plot_width = 9)
cell_data3 <- cell_data[,c("cell_ids","tumor_ids",selected_features$features)]
## cleanup features names
colnames(cell_data3) <- gsub(x=colnames(cell_data3), pattern = 'Nucleus', replacement = 'nuc')
colnames(cell_data3) <- gsub(x=colnames(cell_data3), pattern = 'Cytoplasm', replacement = 'cyto')
colnames(cell_data3) <- gsub(x=colnames(cell_data3), pattern = 'Membrane', replacement = 'memb')
colnames(cell_data3) <- gsub(x=colnames(cell_data3), pattern = 'Entire.Cell', replacement = 'cell')
colnames(cell_data3) <- gsub(x=colnames(cell_data3), pattern = 'pixels', replacement = '')
colnames(cell_data3) <- gsub(x=colnames(cell_data3), pattern = 'square.microns', replacement = '')
colnames(cell_data3) <- gsub(x=colnames(cell_data3), pattern = 'Std.Dev', replacement = '-SD')
colnames(cell_data3) <- gsub(x=colnames(cell_data3), pattern = 'Area', replacement = 'area')
colnames(cell_data3) <- gsub(x=colnames(cell_data3), pattern = 'Compactness', replacement = 'compactness')
colnames(cell_data3) <- gsub(x=colnames(cell_data3), pattern = 'Mean', replacement = '-mean')
colnames(cell_data3) <- gsub(x=colnames(cell_data3), pattern = 'Min', replacement = '-min')
colnames(cell_data3) <- gsub(x=colnames(cell_data3), pattern = 'Max', replacement = '-max')
colnames(cell_data3) <- stringr::str_replace(gsub("\\s+", " ", stringr::str_trim(colnames(cell_data3))), "B", "b")
if(grepl(x=key_nm, pattern = 'NHS.HPFS_mac')){
colnames(cell_data3) <- gsub(x=colnames(cell_data3), pattern = 'Opal.520', replacement = 'CD68')
colnames(cell_data3) <- gsub(x=colnames(cell_data3), pattern = 'Opal.540', replacement = 'CD86')
colnames(cell_data3) <- gsub(x=colnames(cell_data3), pattern = 'Opal.570', replacement = 'MAF')
colnames(cell_data3) <- gsub(x=colnames(cell_data3), pattern = 'Opal.650', replacement = 'IRF5')
colnames(cell_data3) <- gsub(x=colnames(cell_data3), pattern = 'Opal.690', replacement = 'CD206')
}else colnames(cell_data3) <- gsub(x=colnames(cell_data3), pattern = 'Opal.', replacement = '')
colnames(cell_data3) <- gsub(x=colnames(cell_data3), pattern = '\\.', replacement = ' ')
colnames(cell_data3)
if(sum(duplicated(cell_data3$cell_ids))>0){
cell_data3 <- cell_data3[-which(duplicated(cell_data3$cell_ids)),]
}
Viz_feature_heatmap_byPhenotype(cell_data= cell_data3,
pheno_levels = c('BAD','intermediate','GOOD'),
pheno_dir=merged_pheno_dir, output_dir=merged_pheno_dir,
plot_bnm='PIPAfeatures')
Viz_feature_boxplot_byPhenotype(cell_data= cell_data3,plot_bnm='PIPAfeatures',outlier_removal=TRUE,
pheno_dir=merged_pheno_dir, output_dir=merged_pheno_dir,
ncol = 2, plot_height = 10, plot_width = 11)
setwd('../../../')
setwd('../../')
setwd('PIPA_R_package/figure_Rscripts/')
list.files()
getwd()
setwd('../')
setwd('PIPA/R')
list.files()
getwd()
diffr::diffr(file1 = 'C:/Users/MC/Dropbox (Partners HealthCare)/PIPA/PIPA_R_package/PIPA/R/Viz_feature_heatmap_byPhenotype.r', file2 = 'C:/Users/MC/Dropbox (Partners HealthCare)/PIPA/PIPA_R_package/figure_Rscripts/Viz_feature_heatmap_byPhenotype.r')
diffr::diffr(file1 = 'C:/Users/MC/Dropbox (Partners HealthCare)/PIPA/PIPA_R_package/PIPA/R/Viz_feature_boxplot_byPhenotype.r', file2 = 'C:/Users/MC/Dropbox (Partners HealthCare)/PIPA/PIPA_R_package/figure_Rscripts/Viz_feature_boxplot_byPhenotype.r')
########################################
#### PhenoGraph Cluster Analysis
########################################
setwd(package_dir)
setwd('PIPA_v3')
devtools::load_all()
Viz_feature_heatmap_byPhenotype(cell_data= cell_data3,
pheno_levels = c('BAD','intermediate','GOOD'),
pheno_dir=merged_pheno_dir, output_dir=merged_pheno_dir,
plot_bnm='PIPAfeatures')
Viz_feature_boxplot_byPhenotype(cell_data= cell_data3,plot_bnm='PIPAfeatures',outlier_removal=TRUE,
pheno_dir=merged_pheno_dir, output_dir=merged_pheno_dir,
ncol = 2, plot_height = 10, plot_width = 9)
setwd(package_dir)
setwd('PIPA_v3')
devtools::load_all()
Viz_feature_heatmap_byPhenotype(cell_data= cell_data3,
pheno_levels = c('BAD','intermediate','GOOD'),
pheno_dir=merged_pheno_dir, output_dir=merged_pheno_dir,
plot_bnm='PIPAfeatures')
Viz_feature_boxplot_byPhenotype(cell_data= cell_data3,plot_bnm='PIPAfeatures',outlier_removal=TRUE,
pheno_dir=merged_pheno_dir, output_dir=merged_pheno_dir,
ncol = 2, plot_height = 10, plot_width = 9)
setwd(package_dir)
setwd('PIPA_v3')
devtools::load_all()
Viz_feature_heatmap_byPhenotype(cell_data= cell_data3,
pheno_levels = c('BAD','intermediate','GOOD'),
pheno_dir=merged_pheno_dir, output_dir=merged_pheno_dir,
plot_bnm='PIPAfeatures')
rm(list=ls())
########################################
## set paths
########################################
root_path <- '/home/ml467'
#root_path <- 'C:/Users/MC/Dropbox (Partners HealthCare)'
root_dir <- file.path(root_path, 'PIPA')
package_dir <- file.path(root_dir,'program_review/all_ver_package/')
#########################################################
## remove previous version PIPA package in R
#########################################################
#install.packages('installr')
library(installr)
#remove.packages('PIPA')
installr::uninstall.packages('PIPA')
library(PIPA)
package_ver <- 'PIPA_v3'
#########################################################
## run check
#########################################################
setwd(package_ver)
#########################################################
## run check
#########################################################
setwd(package_dir)
setwd(package_ver)
########################################
## set paths
########################################
#root_path <- '/home/ml467'
root_path <- 'C:/Users/MC/Dropbox (Partners HealthCare)'
root_dir <- file.path(root_path, 'PIPA')
package_dir <- file.path(root_dir,'program_review/all_ver_package/')
package_ver <- 'PIPA_v3'
#########################################################
## run check
#########################################################
setwd(package_dir)
setwd(package_ver)
devtools::document()
devtools::document()
devtools::check()
#remove.packages('PIPA')
installr::uninstall.packages('PIPA')
#########################################################
## run check
#########################################################
setwd(package_dir)
setwd(package_ver)
devtools::document()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::load_all()
devtools::install()
?Viz_feature_heatmap_byPhenotype
?Viz_feature_boxplot_byPhenotype
?select_prognostic_feature
??cv.glmnet
devtools::document()
devtools::check()
devtools::load_all()
PIPA::select_prognostic_feature()
?PIPA::select_prognostic_feature
?glmnet
?glmnet::cv.glmnet
#remove.packages('PIPA')
installr::uninstall.packages('PIPA')
devtools::load_all()
library(PIPA)
devtools::install()
library(PIPA)
?select_prognostic_feature
devtools::check()
devtools::document()
closeAllConnections()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
R_KEEP_PKG_SOURCE=yes
options(keep.source.pkgs=Yes)
options(keep.source.pkgs='yes')
devtools::check()  #options(keep.source.pkgs='yes')
devtools::check()  #options(keep.source.pkgs='yes')
package_ver <- 'PIPA_v4'
#remove.packages('PIPA')
installr::uninstall.packages('PIPA')
#########################################################
## run check
#########################################################
setwd(package_dir)
setwd(package_ver)
devtools::document()
devtools::document()
devtools::check()  #options(keep.source.pkgs='yes')
devtools::document()
devtools::check()  #options(keep.source.pkgs='yes')
devtools::document()
devtools::check()  #options(keep.source.pkgs='yes')
devtools::check()  #options(keep.source.pkgs='yes')
devtools::document()
devtools::check()  #options(keep.source.pkgs='yes')
devtools::load_all()
library(PIPA)
?composition_surv_analysis
devtools::document()
devtools::document()
devtools::load_all()
library(PIPA)
?composition_surv_analysis
devtools::document()
devtools::load_all()
library(PIPA)
devtools::install()
